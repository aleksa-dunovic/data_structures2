------------------------------
Start: Testing Heap Node:

Create node 1 with item = 10
Print node: 10

Create node 2 with item = 20:
20

Create node 3 with item = 30:
30

Make node 2 left child of node 1 and node 3 right child of node 1:
Print left of node 1:
20

Print right of node 2:
30

Print parent of node 3:
10

Copy node 1 to node 4:
Print node 4:
10

Print left of node 4:
20

Destroy four nodes
Nodes destroyed successfully

End: Testing Heap Node
------------------------------

------------------------------
Start: Testing heap basic functions:

Case 1: NULL heap:
<NULL Heap>

Case 2: Max heap:
heap type = max, size = 0
<empty heap>
is_empty_heap(h)? 1
h->size = 0
h->root = <NULL Node>
peek = Error(peek_heap): heap is empty
<NULL Data>
heap successfully destroyed

Case 3: Min heap:
heap type = min, size = 0
<empty heap>
is_empty_heap(h)? 1
h->size = 0
h->root = <NULL Node>
peek = Error(peek_heap): heap is empty
<NULL Data>
heap successfully destroyed

Case 4: Treap heap:
Error(create_heap): invalid type, set to max
heap type = max, size = 0
<empty heap>
heap successfully destroyed

End: Testing heap basic functions
------------------------------

------------------------------
Start: Testing find_node_heap:


find_node(150): data = <NULL Node>

find_node(130): data = <NULL Node>

find_node(140): data = 140 , parent = 150 , left = 70 , right = 50

find_node(100): data = <NULL Node>

find_node(110): data = <NULL Node>

find_node(70): data = <NULL Node>

find_node(50): data = <NULL Node>

find_node(15): data = <NULL Node>

find_node(40): data = <NULL Node>

End: Testing find_node_heap
------------------------------

------------------------------
Start: Testing print_heap:

<NULL Heap>

heap type = max, size = 0
<empty heap>

heap type = max, size = 1
